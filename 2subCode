import pandas as pd

from pyTVDN import TVDNDetect
from pathlib import Path
import rpy2.robjects as robj
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import sys
import seaborn as sns


#load data for subject 1
#data=pd.read_csv("E:\petra\TVDNsub1-main\ef.csv")
#np.save("efdata.npy",data)
for n in range(1,6):
    fMRI = np.load("E:\petra\TVDNsub1-main\subjects_all.npy")
    fMRI = fMRI[:, 1:]
    condition = fMRI[:, 0] == n
    sub_1 = fMRI[condition]
    fMRI = sub_1
    # Construct the TVDN Detection Class
    kappa = 1.53
    lamb = 1e-6
    r = 6
    Lmin = 10
    fct = 2
    nsim = 50
    fMRIdet = TVDNDetect(Ymat=fMRI, saveDir="E:\petra\TVDNsub1-main\saved", dataType="fMRI", fName="fMRIsample_",
                         r=6, kappa=1.576, fct=2, lamb=1e-6, downRate=4, MaxM=10, Lmin=10, freq=0.5)
    fMRIdet()
    # Tuning the kappa parameters: (0.5,10)->1.6515; (1.5,1.7)->1.591,
    kappas = np.linspace(1, 2, 100)
    # kappas = [1.45, 1.55, 1.65, 1.75, 1.85, 1.95]
    fMRIdet.TuningKappa(kappas)
    print("The optimal kappas are:", fMRIdet.optKappa)
    print("The optimal number of change point under the range of kappa we speicified is:", fMRIdet.optKappaOptNumChg)
    print("The optimal number of change point is:", fMRIdet.optNumChg)
    # fMRIdet.UpdateEcpts(numChg=2)
    fMRIdet.UpdateEcpts(2)
    print(fMRIdet)
    dir(fMRIdet)
    print(fMRIdet.ecpts)

    # Extract the Eigvals and EigVectors
    fMRIdet.GetFeatures()
    Ur = fMRIdet.curEigVecs
    lamMs = fMRIdet.curEigVals

    # Change the number of change point
    fMRIdet.UpdateEcpts(2)  # Reconstruct the Xmat and estiamte the eigen values, again
    fMRIdet.GetFeatures()
    lamMs = fMRIdet.curEigVals

    if n == 1:
        a_initial = fMRIdet.ecpts
        b_initial = fMRIdet.optKappa
        c_initial = fMRIdet.paras
        d_initial = fMRIdet.optNumChg
        e_initial = fMRIdet.curEigVals
        f_initial = fMRIdet.curEigVecs
        print(a_initial)
        print(b_initial)
        print(c_initial)
        print(d_initial)
        print(e_initial)
        print(f_initial)
    if n > 1:
        a_final = np.vstack((a_initial, fMRIdet.ecpts))
        b_final = np.vstack((b_initial, fMRIdet.optKappa))
        c_final = np.vstack((c_initial, fMRIdet.paras))
        d_final = np.vstack((d_initial, fMRIdet.optNumChg))
        e_final = np.vstack((e_initial, fMRIdet.curEigVals))
        f_final = np.vstack((f_initial, fMRIdet.curEigVecs))
        a_initial = a_final
        b_initial = b_final
        c_initial = c_final
        d_initial = d_final
        e_initial = e_final
        f_initial = f_final
        print(a_final)
        print(b_final)
        print(c_final)
        print(d_final)
        print(e_final)
        print(f_final)
        np.save('savedcpts.npy',a_final)
        np.save('savedoptKappa.npy', b_final)
        np.save('savedparas.npy', c_final)
        np.save('savedoptNumChg.npy', d_final)
        np.save('savedcurEigVals.npy', e_final)
        np.save('savedcurEigVecs.npy', f_final)
    n = n+1
    print(n)

